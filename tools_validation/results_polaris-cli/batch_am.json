[
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deny-egress-ip-block.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deny-egress-ip-block.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "deny-egress-ip-block",
      "Namespace": "staging",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deny-egress-ip-block1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deny-egress-ip-block1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "deny-egress-ip-block",
      "Namespace": "staging",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deploy-toggle.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deploy-toggle.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a-pod-for-retail-therapy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "apache",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "metrics-server",
      "Namespace": "kube-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class has been set",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "metrics-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 79
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "grafana",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-deployment9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "apache-hpa",
      "Namespace": "",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA has a valid min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bookmarker-ui-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bookmarker-ui-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bookmarker-ui-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-ingress-ui3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bookmarker-ui-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-mongodb-headless-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-mongodb-headless-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-headless",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-mongodb-headless-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-mongodb-headless-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-headless",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-net-policy-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-net-policy-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-network-policy",
      "Namespace": "database",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-nginx.tainted.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-nginx.tainted.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-env2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-mysql-volume2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod-configmap-volume2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pod2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-6",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-prometheus-tls.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-prometheus-tls.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-prometheus-tls1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-prometheus-tls1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-6",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebinding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebinding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "storage",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebinding1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebinding1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "storage",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebindings.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebindings.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "demo-rolebinding",
      "Namespace": "demo-app",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebindings1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-rolebindings1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "demo-rolebinding",
      "Namespace": "demo-app",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service-a",
      "Namespace": "service-a",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service-a",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service-a",
      "Namespace": "service-a",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service-a",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-istio.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-istio.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-a-istio",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-istio1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service-a-istio1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-a-istio",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-operator",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-operator",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-service8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "public-service-notes-r-us",
      "Namespace": "notes-r-us",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-sidecar-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-sidecar-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sidecar",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-sidecar-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-sidecar-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sidecar",
      "Namespace": "monitoring",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-startup-liveness-mixed.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-startup-liveness-mixed.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "startup-mixed",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "init-data",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "cont-main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "cont-sidecar-postpone",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "cont-sidecar-break",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 42
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-startup-liveness-mixed_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-startup-liveness-mixed_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "startup-mixed",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-super.notsecret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-super.notsecret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "super-not-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-taint-tolaration-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-taint-tolaration-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "example-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-usr-mgmt-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-usr-mgmt-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "usermgmt-webapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "init-db",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "usermgmt-webapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-virtual-hosting-ing.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-virtual-hosting-ing.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "virtual-hosting",
      "Namespace": "staging",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-virtual-hosting-ing1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-virtual-hosting-ing1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "virtual-hosting",
      "Namespace": "staging",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "el-volumen-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "el-volumen-2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mi-peticion-de-volumen-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "configuraciones",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-volumenes_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-volumenes",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "contenedor-init-1",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "contenedor-init-2",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "contenedor1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "contenedor2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 42
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-VoteDeployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6-VoteDeployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "vote",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "vote",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.1-app_tier_cpu_request.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.1-app_tier_cpu_request.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.1-app_tier_cpu_request_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.1-app_tier_cpu_request_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.10-falco-trigger.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.10-falco-trigger.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "trigger-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.2-autoscale.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.2-autoscale.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.2-autoscale1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.2-autoscale1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.configmaps.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.configmaps.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myrq",
      "Namespace": "",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "keel",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel1_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "PodDisruptionBudget",
      "Results": {
        "pdbDisruptionsIsZero": {
          "ID": "pdbDisruptionsIsZero",
          "Message": "Voluntary evictions are possible",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "keel",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-keel_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keel",
      "Namespace": "keel",
      "Kind": "PodDisruptionBudget",
      "Results": {
        "pdbDisruptionsIsZero": {
          "ID": "pdbDisruptionsIsZero",
          "Message": "Voluntary evictions are possible",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-service9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook",
      "Namespace": "pod-security-webhook",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-serviceAccount.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/60-serviceAccount.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "php-app",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6wp-pvc-rwx.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6wp-pvc-rwx.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wp-pvc-rwx",
      "Namespace": "wordpress",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_configmap_pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_configmap_pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-html-files",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_configmap_pod_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_configmap_pod_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "caddy",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "caddy",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_Logstash-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_Logstash-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logstash-service",
      "Namespace": "kube-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_Logstash-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_Logstash-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logstash-service",
      "Namespace": "kube-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_mysql_svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_mysql_svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_mysql_svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/6_mysql_svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-1-replicaSet.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-1-replicaSet.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "ReplicaSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-1-resource-req-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-1-resource-req-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "queue",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "queue",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-2-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-2-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 58
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-2-resource-req-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-2-resource-req-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-queue",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "datadir1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "datadir2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "datadir3",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "web",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-3-statefulset_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-storage-class",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-4-daemonset.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-4-daemonset.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "fluentd-elasticsearch",
      "Namespace": "kube-system",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "fluentd-elasticsearch",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-api-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-api-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "v1beta1.metrics.k8s.io",
      "Namespace": "",
      "Kind": "APIService",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-arbiter-statefulset.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-arbiter-statefulset.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongodb-arbiter",
      "Namespace": "database",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongodb-arbiter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 72
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-arbiter-statefulset1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-arbiter-statefulset1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongodb-arbiter",
      "Namespace": "database",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongodb-arbiter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 72
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-ConfigMap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-ConfigMap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-config",
      "Namespace": "demo-app",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-cronjob-startingDeadlineSeconds.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-cronjob-startingDeadlineSeconds.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-startingdeadlineseconds",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-startingdeadlineseconds",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner",
      "Namespace": "storage",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nfs-client-provisioner",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner",
      "Namespace": "storage",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nfs-client-provisioner",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-deployment2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "demo-app",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-job.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-job.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-cluster",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-cluster",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mem-limit",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "memlimit",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mem-limit",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "memlimit",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem-exceed2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mem-limit",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "memlimit",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod-quota-mem2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "quota-demo-ns",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-0",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-0",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-2",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-3",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-4",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-2",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-3",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-pod_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-4",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-querier-tls.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-querier-tls.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "querier-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-querier-tls1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-querier-tls1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "querier-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo1",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo1",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-count2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo1",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mem-limitrange",
      "Namespace": "quota-demo-ns",
      "Kind": "LimitRange",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mem-limitrange",
      "Namespace": "quota-demo-ns",
      "Kind": "LimitRange",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-limitrange2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mem-limitrange",
      "Namespace": "quota-demo-ns",
      "Kind": "LimitRange",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo-mem",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo-mem",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-quota-mem2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quota-demo-mem",
      "Namespace": "quota-demo-ns",
      "Kind": "ResourceQuota",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-a-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-a-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-a",
      "Namespace": "service-a",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-a-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-a-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-a",
      "Namespace": "service-a",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-istio.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-istio.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service-b-istio",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service-b-istio",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 65
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-istio1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-istio1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service-b-istio",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service-b-istio",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 65
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-v1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-v1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-v1",
      "Namespace": "staging",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-v11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service-b-v11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-v1",
      "Namespace": "staging",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-service9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-sidecar-tls.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-sidecar-tls.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sidecar-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-sidecar-tls1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-sidecar-tls1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sidecar-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-super.secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-super.secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "super-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-tls-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-tls-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo-api-devopsbyexample-io-tls",
      "Namespace": "staging",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-tls-secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-tls-secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo-api-devopsbyexample-io-tls",
      "Namespace": "staging",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-usr-mgmt.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-usr-mgmt.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "usermgmt-webapp-clb-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-VoteService.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7-VoteService.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "vote",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.1-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.1-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "probes",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.2-data_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.2-data_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.2-data_tier_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.2-data_tier_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "data-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "redis",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.3-app_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.3-app_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.3-app_tier_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.3-app_tier_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.secrets.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7.secrets.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysecret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-keelingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-keelingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sites",
      "Namespace": "keel",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-keelingress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-keelingress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sites",
      "Namespace": "keel",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/70-validatingwebhookconfiguration9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-security-webhook.kubernetes.io",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7ConfigMap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7ConfigMap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7wp-cm.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7wp-cm.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wp-cm-vars",
      "Namespace": "wordpress",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_hostpath_pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_hostpath_pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mariadb",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mariadb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_Kibana-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_Kibana-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kibana-logging",
      "Namespace": "kube-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kibana-logging",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_Kibana-deploy1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_Kibana-deploy1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kibana-logging",
      "Namespace": "kube-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kibana-logging",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mariadb",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_pvc_pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_pvc_pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mariadb",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mariadb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_wordpress_deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_wordpress_deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "wordpress",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wordpress",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_wordpress_deploy1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/7_wordpress_deploy1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "wordpress",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wordpress",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-hostPath.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-hostPath.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "metrics-server",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:aggregated-metrics-reader",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:metrics-server",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "metrics-server-auth-reader",
      "Namespace": "kube-system",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "metrics-server:system:auth-delegator",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:metrics-server",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "metrics-server",
      "Namespace": "kube-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "metrics-server",
      "Namespace": "kube-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class has been set",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "metrics-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 85
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-1-metrics-server-init_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "v1beta1.metrics.k8s.io",
      "Namespace": "",
      "Kind": "APIService",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-2-nfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-2-nfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-3-pv.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-3-pv.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-demo",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-4-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-4-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-demo",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nfs-client-provisioner",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner-runner",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "run-nfs-client-provisioner",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "default",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "managed-nfs-storage",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-allInOne_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "test-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "test-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-nfs-client-provisioner.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-nfs-client-provisioner.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "test-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "test-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-client-provisioner-runner",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "run-nfs-client-provisioner",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "default",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-rbac_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "leader-locking-nfs-client-provisioner",
      "Namespace": "",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-storage-class.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-6-storage-class.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "managed-nfs-storage",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-arbiter-headless-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-arbiter-headless-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-arbiter-headless",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-arbiter-headless-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-arbiter-headless-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-arbiter-headless",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-cronjob-without-startingDeadlineSeconds.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-cronjob-without-startingDeadlineSeconds.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-without-startingdeadlineseconds",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-without-startingdeadlineseconds",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-deploy-toggle-banner.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-deploy-toggle-banner.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a-pod-for-retail-therapy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "apache",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "demo-app",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-ingress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-ingress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "grafana",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx-rolling-update.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx-rolling-update.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deploy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx-rolling-update1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx-rolling-update1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deploy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx.secretvolume.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-nginx.secretvolume.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-443.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-443.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-service",
      "Namespace": "demo-app",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-a-istio.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-a-istio.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-istio",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-a-istio1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-a-istio1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-istio",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-b-v2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-b-v2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-v2",
      "Namespace": "staging",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-b-v21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-service-b-v21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "service-b-v2",
      "Namespace": "staging",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storage-class.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storage-class.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "efs",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storage-class1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storage-class1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "efs",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storegateway-tls.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storegateway-tls.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "storegateway-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storegateway-tls1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-storegateway-tls1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "storegateway-tls",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tethys.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tethys.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tethys-github",
      "Namespace": "tethys",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tethys-github",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tethys1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tethys1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tethys-github",
      "Namespace": "tethys",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tethys-github",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tls-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tls-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo-api",
      "Namespace": "staging",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tls-ingress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-tls-ingress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo-api",
      "Namespace": "staging",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-usr-mgmt-nlb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-usr-mgmt-nlb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "usermgmt-webapp-nlb-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-WorkerDeployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8-WorkerDeployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "worker",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "worker",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1-app_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1-app_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1-app_tier_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1-app_tier_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "await-redis",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 58
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1.4 share-process-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8.1.4 share-process-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "shell",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "core",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8a_parca_rbac_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "core",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "core",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "parca",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8b_parca_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "parca",
      "Namespace": "core",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8votedeployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8votedeployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "vote",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "vote",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8wp-secret-pass.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8wp-secret-pass.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wp-pass",
      "Namespace": "wordpress",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_daemonset.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_daemonset.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kplabs-daemonset",
      "Namespace": "",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kplabs-pods",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_kibana-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_kibana-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kibana-logging",
      "Namespace": "kube-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_kibana-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_kibana-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kibana-logging",
      "Namespace": "kube-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_wordpress_svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_wordpress_svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpress-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_wordpress_svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/8_wordpress_svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpress-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-configmap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-configmap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "appvar",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-podTest.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-podTest.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-test",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "test",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "queue",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "queue",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "position-simulator",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "position-simulator",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "position-tracker",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "position-tracker",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "api-gateway",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "api-gateway",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-1-workload_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-webapp",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-queue",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-position-tracker",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-2-services_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-api-gateway",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-3-autoscale-rules.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-3-autoscale-rules.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "api-gateway",
      "Namespace": "default",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-cronjob-timezone.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-cronjob-timezone.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "cronjob-timezone",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "cronjob-timezone",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "web-ingress",
      "Namespace": "demo-app",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-monogodb-metrics-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-monogodb-metrics-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-metrics",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-monogodb-metrics-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-monogodb-metrics-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-metrics",
      "Namespace": "database",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-nginx.secretenv.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-nginx.secretenv.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-ResultDeployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-ResultDeployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "result",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "result",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-Service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-Service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-service-443",
      "Namespace": "demo-app",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-headless",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-headless",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-sts",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-headless",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-sts",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-nginx_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-sts",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv0",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv0",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv3",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv4",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv0",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv3",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv4",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv3",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-sts-pv_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nfs-pv4",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-tethys-harbor.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-tethys-harbor.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "ers-ce",
      "Namespace": "tethys",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "ers-ce",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-tethys-harbor1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-tethys-harbor1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "ers-ce",
      "Namespace": "tethys",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "ers-ce",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-usr-mgmt-node-port-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9-usr-mgmt-node-port-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "usermgmt-webapp-nodeport-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.1-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.1-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "volumes",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-tier-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-tier-volume-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.2-pv_data_tier_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "data-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "redis",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3-app_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3-app_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3-app_tier_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3-app_tier_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "app-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "await-redis",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 58
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.1 pod-nodeselector.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.1 pod-nodeselector.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-nodeselector",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.2 pod-with-node-affinity-weight.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.2 pod-with-node-affinity-weight.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-with-node-affinity-weight",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.2 pod-with-node-affinity.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.2 pod-with-node-affinity.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-with-node-affinity",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.4 pod-nodename.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.3.4 pod-nodename.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.4-support_tier.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.4-support_tier.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "support-tier",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "counter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "poller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 49
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.serviceaccount.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9.serviceaccount.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysecretname",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-acl-conf.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-acl-conf.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "90-acl-conf",
      "Namespace": "mailserver",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-plugin-conf.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-plugin-conf.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "90-plugin-conf",
      "Namespace": "mailserver",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-quota-conf.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-quota-conf.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "90-quota-conf",
      "Namespace": "mailserver",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-sieve-extprograms-conf.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90-sieve-extprograms-conf.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "90-sieve-extprograms-conf",
      "Namespace": "mailserver",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90_FluentBit_test.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/90_FluentBit_test.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluent-bit-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sandbox-observability",
      "Namespace": "observability",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-ingress_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-ingress_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "argo-ingress",
      "Namespace": "argo",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-storageclass.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-storageclass.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-demo",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-storageclass_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-storageclass_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim-demo",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-test-server.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-test-server.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "test-server",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-test-server1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/99-test-server1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "test-server",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9voteservice.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9voteservice.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "vote",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat-config",
      "Namespace": "kube-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat-prospectors",
      "Namespace": "kube-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "filebeat",
      "Namespace": "kube-system",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "filebeat",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat-config",
      "Namespace": "kube-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "filebeat-prospectors",
      "Namespace": "kube-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/9_FileBeat_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "filebeat",
      "Namespace": "kube-system",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "filebeat",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a-pod-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a-pod-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-pod",
      "Namespace": "a",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "init-nginx",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a-pod-service_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a-pod-service_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-service",
      "Namespace": "a",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "a-secret",
      "Namespace": "demo",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/a9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "a",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kubernetes-pause",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "guestbook",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aad-oidc-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aad-oidc-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "aad-oidc-secret",
      "Namespace": "open-liberty-demo",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-developer.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-developer.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-developer",
      "Namespace": "aarkay",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-developer_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-developer_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-developer-rolebinding",
      "Namespace": "roboshop",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-read-only.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-read-only.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-read-role",
      "Namespace": "roboshop",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-read-only_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/aarkay-read-only_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-read-rolebinding",
      "Namespace": "roboshop",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/abc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/abc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "genjob",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "genjob",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-hdfs-assert.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-hdfs-assert.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "access-hdfs",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host is disallowed",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "Proc mount must not be changed from the default",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": []
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-hdfs-install.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-hdfs-install.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "access-hdfs",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "access-hdfs",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-manual-listener-assert_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-manual-listener-assert_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-manual-listener",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-manual-listener_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-manual-listener_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "access-manual-listener",
      "Namespace": "",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "caddy",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "access-manual-listener",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pv-access-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pv-access-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-common-web-ui.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-common-web-ui.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-common-web-ui",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres-webhooks.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres-webhooks.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-edb-postgres-webhooks",
      "Namespace": "opNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-edb-postgres",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-edb-postgres1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-edb-postgres",
      "Namespace": "zenNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-ibm-common-service-operator.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-ibm-common-service-operator.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-ibm-common-service-operator",
      "Namespace": "opNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-icp-mongodb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-icp-mongodb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-icp-mongodb",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-auth-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-auth-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-platform-auth-service",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-identity-management.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-identity-management.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-platform-identity-management",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-identity-provider.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-platform-identity-provider.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-platform-identity-provider",
      "Namespace": "csNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-zen-meta-api.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access-to-zen-meta-api.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "access-to-zen-meta-api",
      "Namespace": "opNamespace",
      "Kind": "NetworkPolicy",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user1",
      "Namespace": "ns1",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shared-resources",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shared-resources",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backend",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-configmap",
      "Namespace": "shared-resources",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-service-account",
      "Namespace": "backend",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "configmap-reader",
      "Namespace": "shared-resources",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "read-configmap",
      "Namespace": "shared-resources",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces1_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-pod",
      "Namespace": "backend",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "fetch-config",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backend",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-configmap",
      "Namespace": "shared-resources",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-service-account",
      "Namespace": "backend",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "configmap-reader",
      "Namespace": "shared-resources",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "read-configmap",
      "Namespace": "shared-resources",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/AccessingResourcesFromOtherNamespaces_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-pod",
      "Namespace": "backend",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "fetch-config",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accesskeys.secrets.sops.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accesskeys.secrets.sops.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pg-backup-creds",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user1-clusterrole",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user1-clusterrolebinding",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ns1-role",
      "Namespace": "ns1",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ns1-rolebinding",
      "Namespace": "ns1",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ks-role",
      "Namespace": "kube-system",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ks-rolebinding",
      "Namespace": "kube-system",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/access_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user1-token",
      "Namespace": "ns1",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "account-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "account",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "account-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "account",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-deploy2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "account-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "account",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service-dev.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service-dev.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "account-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "account-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-service4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-svc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-test.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account-test.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-namespace",
      "Namespace": "hz-root",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logging",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "flux-operator",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "helm-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "image-automation-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "image-reflector-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kustomize-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "notification-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "source-controller",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "logging",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "logging",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logging",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "logging",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "logging",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "default",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentbit",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-ingress",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-ingress",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account4_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-ingress",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "mows-dev-k8s-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "mows-dev-k8s-dashboard",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "mows-dev-k8s-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account6_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account6_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "mows-dev-k8s-dashboard",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-token",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-crb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account9_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkinsclusterrole",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accounts-service-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accounts-service-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "accounts-service",
      "Namespace": "ersms-forum",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "accounts-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accountservice.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accountservice.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "accountservice",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "accountservice",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accountservice_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/accountservice_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "accountservice",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-token",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins",
      "Namespace": "default",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-crb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkinsclusterrole",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_admin_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_admin_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-admin-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/account_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "account-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acl_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acl_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "acl-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acl_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acl_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "acl-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acme-ingress-fix.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acme-ingress-fix.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dummy-acme",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acme-ingress-fix_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acme-ingress-fix_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dummy-acme",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acountService.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acountService.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "react-app",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acr-nginx.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acr-nginx.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx0-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acr-nginx1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/acr-nginx1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx0-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "blue-green-demo-active",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "reads-bluegreen-active",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_admin_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_admin_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "activecheck-admin-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "activecheck-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activecheck_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "activecheck-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activeDeadlineSeconds.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activeDeadlineSeconds.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "cow-say-job-activedeadlineseconds",
      "Namespace": "",
      "Kind": "Job",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "cow-say",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "queue",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "activemq",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-queue",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "activemq",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "activemq",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activemq_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fleetman-activemq",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activepieces-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activepieces-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ap-postgres-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activepieces-pvc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/activepieces-pvc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ap-redis-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "active-mq-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "active-mq-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "active-mq-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "active-mq-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq_srv.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq_srv.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "active-mq-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq_srv1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_mq_srv1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "active-mq-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "active-profile-configmap",
      "Namespace": "sgma-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "active-profile-configmap",
      "Namespace": "sgma-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/active_profile2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "active-profile-configmap",
      "Namespace": "sgma-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/actual-app.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/actual-app.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "old-deploy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "old-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/actual-app1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/actual-app1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mywebapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/ad-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/ad-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "ad-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "ad-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 61
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/ad-service_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/ad-service_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ad-cip-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adam-physical-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adam-physical-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adam-database-engineer",
      "Namespace": "databases",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adam_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adam-database-engineer",
      "Namespace": "databases",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-configmap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-configmap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-conf",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-configmap1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-configmap1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-conf",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentd-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentd-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "counter",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "count",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "count-agent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fluentd-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "counter",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "count",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "count-agent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "webserver-1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webserver",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "adapter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adapter_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "counter",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "count",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "count-agent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-cap-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-cap-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-cap-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-cap-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-node-selector.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/add-node-selector.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-kusc00401",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "samba-ad-server",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "container-json",
      "Namespace": "samba-ad-server",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "svc-dc-0",
      "Namespace": "samba-ad-server",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "svc-dc-1",
      "Namespace": "samba-ad-server",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addc_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "svc-dns-pool",
      "Namespace": "samba-ad-server",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adder-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adder",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adder-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adder-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adder-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addition-honeypot.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addition-honeypot.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "duplicate-addition-service-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "duplicate-addition-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addition.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addition.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "addition-service-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "addition-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-image-replicas-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-image-replicas-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "client",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "alpine",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "additional-scrape-configs",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "additional-scrape-configs",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "additional-scrape-configs",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "additional-scrape-configs",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional-scrape-configs4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "additional-scrape-configs",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionalScrapeConfigs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionalScrapeConfigs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kube-prometheus-stack-prometheus-scrape-confg",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionalScrapeConfigs5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionalScrapeConfigs5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kube-prometheus-stack-prometheus-scrape-confg",
      "Namespace": "monitoring",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "email-operator-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_role_binding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_role_binding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "email-operator-rolebinding",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "actions-runner-controller-additional-perms",
      "Namespace": "github-actions",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "actions-runner-controller-additional-perms",
      "Namespace": "github-actions",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "actions-runner-controller-additional-perms",
      "Namespace": "github-actions",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_rs-controller_perms_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "actions-runner-controller-additional-perms",
      "Namespace": "github-actions",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_service_account.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additional_service_account.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "email-operator",
      "Namespace": "system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionDeployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionDeployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "addition-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "addition",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionService.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/additionService.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "addition-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addon-manager.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addon-manager.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kube-addon-manager",
      "Namespace": "kube-system",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network should not be configured",
            "Details": null,
            "Success": false,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kube-addon-manager",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address",
      "Namespace": "dev-kube",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-config_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-config_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address-docker",
      "Namespace": "dev-kube",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-secrets.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-secrets.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address-db-secrets",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-secrets1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-secrets1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address-db-secrets",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "address-app",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "address-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 70
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "address-app",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "address-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 70
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address-service_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "address",
      "Namespace": "dev-kube",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/address_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "address",
      "Namespace": "dev-kube",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "address",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addrole-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addrole-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "addrole",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addrole-secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addrole-secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "addrole",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addser.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/addser.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "add-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-configmap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-configmap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-config",
      "Namespace": "adguard",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adguard-deployment",
      "Namespace": "adguard",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adguard-home",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-ingress",
      "Namespace": "default",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-pv-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-pv-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-pvc",
      "Namespace": "adguard",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adguard-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adguard-service",
      "Namespace": "adguard",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-acount.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-acount.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-acount_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-acount_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-api_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-api",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role-binding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role-binding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,

,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role-binding2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role-binding2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,

,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "portainer-cluster-admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cluster-admin",
      "Namespace": "default",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "portainer-cluster-admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cluster-admin",
      "Namespace": "default",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-cluster-role5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-clusterrole-aggregation.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-clusterrole-aggregation.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "karmada-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-clusterrole-aggregation_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-clusterrole-aggregation_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "karmada-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-dashboard.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-dashboard.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-dashboard_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-dashboard_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-db-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-db-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-deploy",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-db-deploy_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-db-deploy_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-deployment",
      "Namespace": "buooh",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 58
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 76
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-deployment1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ds.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ds.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-workload",
      "Namespace": "",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Should not be running as privileged",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ingress9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ingress9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dashboard-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-k8s.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-k8s.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "micro-demo-admin-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "micro-demo-admin-deployment",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-k8s_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-k8s_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "micro-demo-admin-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ksa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-ksa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-kubernetes-account",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-kubernetes-account",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "full-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "full-access-binding",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "full-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-kubernetes-account_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "full-access-binding",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-admin",
      "Namespace": "roboshop",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-admin",
      "Namespace": "roboshop",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-cluster-admin",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-level_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "roboshop-cluster-admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "rethinkdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "rethinkdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pod3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "rethinkdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pods.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-pods.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-pods",
      "Namespace": "default",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-rolebinding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-rolebinding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-role_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-role_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:23:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-sa1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-sa1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keycloak-http",
      "Namespace": "default",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "keycloak-http",
      "Namespace": "default",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-secret5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-secret",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-vmagent-cm",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "selmag-admin-server-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "selmag-admin-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "vmagent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 49
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "selmag-admin-server-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-deployment_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "selmag-admin-server-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-server-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-server",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubenetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-account_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-service-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-service",
      "Namespace": "buooh",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-service6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rethinkdb-admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-svc",
      "Namespace": "service",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-svc1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-svc1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-svc-pods",
      "Namespace": "service",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wait-for-postgres",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "wait-for-cassandra",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "admin-svc-cont",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 54
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-cluster-role-binding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-cluster-role-binding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-clusterrolebinding3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-manual-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-manual-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user-manual-token",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-rbac_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user-sa",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-sa_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-sa_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user-crb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-secret6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user-token",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-service-account.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-service-account.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user-serviceaccount2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user10_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user10_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user13_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user14_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user14_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user15_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user15_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user16_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user16_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user18_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user6_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user7_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user7_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "default",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user8_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user8_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin-user9_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kubernetes-dashboard",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "portfolio-admin",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "portfolio-admin",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "portfolio-admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "portfolio-admin",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-backend",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-backend",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 61
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "admin-consumer",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "admin-consumer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 61
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-backend",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dashboard-admin",
      "Namespace": "kube-system",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/admin3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-user",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminapi.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminapi.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminapi-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminapi_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminapi_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminapi-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminapi",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminClusterRole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminClusterRole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "admin-cluster-role",
      "Namespace": "roboshop",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-config3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deploy-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deploy-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-deploy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deploy-svc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deploy-svc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "adminer",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-deployment2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-secret3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "adminer",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.lb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.lb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-lb",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.svc.cl.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.svc.cl.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-cl",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.svc.np.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.svc.np.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-np",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pgweb",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pgweb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pgweb-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer10_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pgweb-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer6_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer6_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer7_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer7_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer8_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer8_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "adminer-web",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T08:24:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/adminer9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "wp-adminer",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "adminer",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
]
