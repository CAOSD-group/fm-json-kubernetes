[
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "k8api",
      "Namespace": "prod",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "k8api",
      "Namespace": "prod",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "k8api",
      "Namespace": "prod",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup1_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "prod",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prod",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "stage",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "db-connect-stage-pod",
      "Namespace": "stage",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "prod-pod",
      "Namespace": "prod",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-5",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db",
      "Namespace": "team-5",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "apparmor",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "secure",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "secure",
      "Namespace": "secure",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "c1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "c2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "c3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rbac-1",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rbac-2",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prod-db",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db-config",
      "Namespace": "rbac-2",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-red",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "container-host-hacker",
      "Namespace": "team-red",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db-index.html",
      "Namespace": "prod-db",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mysql",
      "Namespace": "prod-db",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql",
      "Namespace": "prod-db",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user-client",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-pod-db-external",
      "Namespace": "user-client",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-pod",
      "Namespace": "user-client",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup2_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-stage-pod",
      "Namespace": "stage",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prod",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "stage",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "db-connect-stage-pod",
      "Namespace": "stage",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "prod-pod",
      "Namespace": "prod",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-5",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db",
      "Namespace": "team-5",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "apparmor",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "secure",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "secure",
      "Namespace": "secure",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "c1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "c2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "c3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rbac-1",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rbac-2",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prod-db",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dev",
      "Namespace": "rbac-1",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db-config",
      "Namespace": "rbac-2",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-red",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "container-host-hacker",
      "Namespace": "team-red",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "db-index.html",
      "Namespace": "prod-db",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mysql",
      "Namespace": "prod-db",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql",
      "Namespace": "prod-db",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user-client",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-pod-db-external",
      "Namespace": "user-client",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-pod",
      "Namespace": "user-client",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup3_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "all-stage-pod",
      "Namespace": "stage",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "all-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "blue-team",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "httpd",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "blue-team",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "httpd",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment3",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup4_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment4",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "team-purple",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment3",
      "Namespace": "team-xxx",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mysql",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment2",
      "Namespace": "team-xxx",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mariadb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "team-xxx",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment4",
      "Namespace": "team-xxx",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment2",
      "Namespace": "team-purple",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment3",
      "Namespace": "team-purple",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-green",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment3",
      "Namespace": "team-green",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mysql",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment2",
      "Namespace": "team-green",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mariadb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment1",
      "Namespace": "team-green",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "deployment4",
      "Namespace": "team-green",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task-setup_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-xxx",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-conf",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "1st",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "2nd",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-conf",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_html.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_html.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-html",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task1_nginx_service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task2_prometheus_exporter.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task2_prometheus_exporter.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-prometheus-exporter",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-prometheus-exporter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task2_service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/task2_service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "promexporter",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskdaytwo.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskdaytwo.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-giropops",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-giropops",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "client-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager-svc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager-svc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backend-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmanager.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "helm-taskmanager",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "helm-taskmanager-ui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "helm-taskmanager-backend",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "helm-mongodb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 40
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "taskmaster-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "taskmaster-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "taskmaster-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "taskmaster-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "taskmaster-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-ingress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/taskmaster-ingress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "taskmaster-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-be.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-be.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-be",
      "Namespace": "tasks",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-be",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-be_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-be_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-be",
      "Namespace": "tasks",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-cm.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-cm.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-cm",
      "Namespace": "tasks",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-dep.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-dep.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app-tasks-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "users",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment30.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment30.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "users",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-deployment9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-fe.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-fe.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-fe",
      "Namespace": "tasks",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-fe",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-fe_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-fe_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-fe",
      "Namespace": "tasks",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-ns.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-ns.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service30.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service30.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-service9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-services.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks-services.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks10_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks10_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks12_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks12_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks17_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks17_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks18_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks18_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks27_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks27_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasks-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks7_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks7_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasksapp-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp-svc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp-svc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tasksapp-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasksapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasksapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasksapp1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasksapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasksapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tasks_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tasks-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tasks-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tautulli-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tautulli-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tautulli",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tautulli",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tautulli-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tautulli-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tautulli",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcapi-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcapi-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcapi",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcapi",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcapi-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcapi-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcapi",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcardin-webtop",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webtop",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "docker-dind",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Should not be running as privileged",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcardin-webtop",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webtop",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "docker-dind",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Should not be running as privileged",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 46
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-config-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-deployment_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-config-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-ingress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-ingress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-secrets.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-secrets.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-secrets",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-secrets1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcardin-webtop-secrets1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcardin-webtop-secrets",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcb-vote-back",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcb-vote-back",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcb-vote-back",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcb-vote-front",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcb-vote-front",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis-v2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcb-vote-front",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcb-vote-back",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcb-vote-back",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcb-vote-back",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcb-vote-front",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcb-vote-front",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcb-vote-plus-redis_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcb-vote-front",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "v1alpha1.dubbo.aeraki.io",
      "Namespace": "",
      "Kind": "APIService",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "v1alpha1.redis.aeraki.io",
      "Namespace": "",
      "Kind": "APIService",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-apiservice_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "v1alpha1.metaprotocol.aeraki.io",
      "Namespace": "",
      "Kind": "APIService",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-istio-cm.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcm-istio-cm.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "istio",
      "Namespace": "istio-system",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-configmap2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-configmap2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v110_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v110_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v110_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v110_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v11_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v11_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v13_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v13_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v13_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v13_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v15_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v15_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:13:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v15_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v15_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v17_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v17_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v17_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-all-v17_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-dual-stack_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv41.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv41.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv41_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv41_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv42.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv42.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv42_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv42_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv43.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv43.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv43_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv43_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv44.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv44.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv44_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv44_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv45.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv45.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv45_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv45_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv61.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv61.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv61_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv61_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv62.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv62.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv62_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv62_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv63.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv63.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv63_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv63_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv64.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv64.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv64_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv64_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv65.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv65.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv65_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv65_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv6_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-ipv6_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services4_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services5_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo-services_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo-v2",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-echo_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-echo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-echo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-liveness-readiness.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-liveness-readiness.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "goproxy",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "goproxy",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-liveness.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-liveness.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "liveness-tcp",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "liveness-tcp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-probes.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-probes.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-random-app",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-random-app",
      "Namespace": "tcp-random-app",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-random-app",
      "Namespace": "tcp-random-app",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-random-app_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-random-app",
      "Namespace": "tcp-random-app",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-random-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-server-ss.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-server-ss.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tcp-server",
      "Namespace": "default",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tcp-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-server-ss_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-server-ss_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-server-0-service",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-services-cm.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-services-cm.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tcp-services",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-tls-secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp-tls-secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "transport-server-tls-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp_lb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp_lb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "sample-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp_lb_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tcp_lb_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "internal-lbapp",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea-minion.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea-minion.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cafe-ingress-tea-minion",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tea",
      "Namespace": "tea",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tea",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tea1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tea-svc",
      "Namespace": "tea",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-client-depl.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-client-depl.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teacher-client",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teacher-client",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-client-depl_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-client-depl_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teacher-client",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-gateway-depl.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-gateway-depl.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teacher-gateway",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teacher-gateway",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-gateway-depl_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teacher-gateway-depl_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teacher-gateway",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team-12-emp-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team-12-emp-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "emp-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "emp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team-12-emp-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team-12-emp-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "emp-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "emp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-reader",
      "Namespace": "teama",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-reader",
      "Namespace": "teama",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-role2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod-reader",
      "Namespace": "teama",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "read-pods",
      "Namespace": "teama",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "read-pods",
      "Namespace": "teama",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teama-rolebinding2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "read-pods",
      "Namespace": "teama",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamldap_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamldap_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teamldap-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamldap_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamldap_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teamldap-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamoidc_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamoidc_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teamoidc-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamoidc_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teamoidc_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teamoidc-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_editor_role2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_editor_role2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_viewer_role2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/team_viewer_role2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "team-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-recommender",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-webui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-registry",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-persistence",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-auth",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-image",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip1_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-recommender",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-webui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-registry",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-persistence",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-auth",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-image",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip2_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-recommender",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-webui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-registry",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-persistence",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-auth",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-image",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-clusterip_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-ingress",
      "Namespace": "default",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-db",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-registry",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-registry",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-persistence",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-persistence",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-auth",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-auth",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-image",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-image",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-recommender",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-recommender",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "teastore-webui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/teastore-ribbon_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "teastore-webui",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "techlanches-api",
      "Namespace": "techlanches",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "techlanches-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 64
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlanches-api-service",
      "Namespace": "techlanches",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-api-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlanches-api-hpa",
      "Namespace": "techlanches",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-namespace.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-namespace.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlanches",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq",
      "Namespace": "techlanches",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "rabbitmq",
      "Namespace": "techlanches",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "rabbitmq",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-rabbitmq-deployment_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbit-data",
      "Namespace": "techlanches",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-secrets.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-secrets.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlanches-secrets",
      "Namespace": "techlanches",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-worker-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-worker-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "techlanches-worker",
      "Namespace": "techlanches",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "techlanches-worker",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-worker-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlanches-worker-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlanches-worker-hpa",
      "Namespace": "techlanches",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA has a valid min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "techlog",
      "Namespace": "dev-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "techlog",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "techlog-ui",
      "Namespace": "dev-system",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "techlog-ui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlog-env",
      "Namespace": "dev-system",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlog",
      "Namespace": "dev-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/techlog_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "techlog-ui",
      "Namespace": "dev-system",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tejas.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tejas.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tomcat-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tomcat-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-aggregate-edit-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-aggregate-edit-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-aggregate-view-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-aggregate-view-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-jx-crb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-jx-crb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot-jx",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot",
      "Namespace": "jx",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot",
      "Namespace": "jx",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role allows Pods/exec or pods/attach",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot",
      "Namespace": "jx",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-sa1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-bot-sa1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-bot",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-tenant",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-backend",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-tenant",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard-backend",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dashboard-info",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-dashboard",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-dashboard_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-dashboard",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-dashboard",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 73
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors-certs",
      "Namespace": "tekton-pipelines",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-triggers-core-interceptors",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-interceptors_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-cluster-access-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-cluster-access-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-cluster-access-crb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-cluster-access-crb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-leaderelection-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-leaderelection-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-tenant-access-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-tenant-access-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-tenant-access-crb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-controller-tenant-access-crb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-info-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-info-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-info-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-info-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-leader-election-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-leader-election-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-ns.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-ns.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-remote-resolvers-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-remote-resolvers-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-remote-resolvers",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-crb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-crb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-namespace-rbac-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-namespace-rbac-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-namespace-rbac-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-namespace-rbac-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-resolution-request-updates-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-resolution-request-updates-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-resolution-request-updates",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-resolvers-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-cluster-access-clusterrole.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-cluster-access-clusterrole.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-cluster-access-crb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-cluster-access-crb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webhook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 79
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-horizontalpodautoscaler.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-horizontalpodautoscaler.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-leaderelection-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-leaderelection-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-rb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-rb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-sa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-sa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-pipelines-webhook-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-serviceaccount.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-serviceaccount.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-build",
      "Namespace": "python-hello-build",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-admin",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-controller-admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-webhook-admin",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors-secrets",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-webhook-admin",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors-secrets",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "triggers-webhook-certs",
      "Namespace": "tekton-pipelines",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "validation.webhook.triggers.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook.triggers.tekton.dev",
      "Namespace": "",
      "Kind": "MutatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config.webhook.triggers.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-aggregate-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-eventlistener-roles",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_30.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_30.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-aggregate-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-defaults-triggers",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "feature-flags-triggers",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "triggers-info",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-triggers-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_35.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_35.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-triggers-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_36.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_36.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging-triggers",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_37.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_37.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability-triggers",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_38.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_38.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_39.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_39.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-triggers-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-triggers-controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-eventlistener-clusterroles",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_40.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_40.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_41.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_41.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-triggers-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webhook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 63
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-admin-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-core-interceptors",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-triggers_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook-certs",
      "Namespace": "tekton-pipelines",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "validation.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "MutatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_30.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_30.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-defaults",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "feature-flags",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_35.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_35.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_36.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_36.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_37.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_37.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_38.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_38.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_39.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_39.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-registry-cert",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_40.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_40.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-spire",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_41.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_41.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-pipelines-controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 73
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_42.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_42.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_43.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_43.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_44.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_44.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-resolution-request-updates",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_45.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_45.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_46.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_46.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_47.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_47.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_48.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_48.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_49.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_49.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bundleresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_50.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_50.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cluster-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_51.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_51.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "resolvers-feature-flags",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_52.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_52.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_53.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_53.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_54.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_54.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_55.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_55.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "git-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_56.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_56.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "hubresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_57.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_57.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-remote-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_58.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_58.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_59.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_59.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webhook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 79
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_60.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_60.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-updated_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook-cr.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook-cr.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-gitlab-minimal",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook-cr_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook-cr_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-gitlab-cluster-minimal",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gitlab-secret",
      "Namespace": "python-hello-build",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-gitlab-sa",
      "Namespace": "python-hello-build",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-gitlab-binding",
      "Namespace": "python-hello-build",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding does not reference a Role allowing Pod exec or attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 25
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-triggers-gitlab-clusterbinding",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton-webhook_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gitlab-webhook",
      "Namespace": "python-hello-build",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-events-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-events-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-events-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-events-controller-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook-certs",
      "Namespace": "tekton-pipelines",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "validation.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_35.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_35.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "MutatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_36.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_36.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_37.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_37.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_38.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_38.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-events-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_40.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_40.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-events",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_41.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_41.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "feature-flags",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_42.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_42.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_43.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_43.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_44.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_44.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-events",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_45.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_45.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_46.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_46.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_47.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_47.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_48.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_48.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-registry-cert",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_49.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_49.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-spire",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_50.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_50.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-tracing",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_51.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_51.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-pipelines-controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 73
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_52.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_52.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_53.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_53.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-events-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tekton-events-controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 73
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_54.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_54.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-events-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_55.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_55.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_56.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_56.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-resolution-request-updates",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_57.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_57.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_58.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_58.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_59.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_59.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_60.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_60.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_61.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_61.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bundleresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_62.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_62.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cluster-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_63.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_63.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "resolvers-feature-flags",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_64.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_64.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_65.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_65.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_66.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_66.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_67.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_67.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "git-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_68.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_68.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "http-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_69.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_69.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "hubresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-events-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_70.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_70.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-remote-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_71.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_71.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-remote-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_72.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_72.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_73.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_73.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webhook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 79
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_74.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_74.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton1_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-leaderelection",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller-tenant-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook-certs",
      "Namespace": "tekton-pipelines",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "validation.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook-cluster-access",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_30.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_30.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "MutatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config.webhook.pipeline.tekton.dev",
      "Namespace": "",
      "Kind": "ValidatingWebhookConfiguration",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-edit",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_33.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_33.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-aggregate-view",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_34.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_34.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-artifact-bucket",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_35.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_35.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-artifact-pvc",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_36.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_36.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-defaults",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_37.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_37.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "feature-flags",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_38.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_38.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_39.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_39.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_40.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_40.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_41.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_41.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_42.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_42.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-registry-cert",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_43.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_43.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-spire",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_44.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_44.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-trusted-resources",
      "Namespace": "tekton-pipelines",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_46.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_46.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_47.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_47.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_48.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_48.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-resolution-request-updates",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_49.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_49.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_50.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_50.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_51.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_51.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_52.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_52.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-resolvers-namespace-rbac",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_53.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_53.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bundleresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_54.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_54.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cluster-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_55.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_55.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "resolvers-feature-flags",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_56.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_56.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-leader-election",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_57.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_57.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-logging",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_58.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_58.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-observability",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_59.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_59.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "git-resolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "Potentially sensitive content is detected in the ConfigMap keys or values",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-leader-election",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_60.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_60.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "hubresolver-config",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_61.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_61.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-remote-resolvers",
      "Namespace": "tekton-pipelines-resolvers",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "controller",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_62.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_62.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_63.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_63.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "webhook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 79
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_64.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_64.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-info",
      "Namespace": "tekton-pipelines",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-controller",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tekton2_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tekton-pipelines-webhook",
      "Namespace": "tekton-pipelines",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tektonobservation_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tektonobservation_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tektonobservation-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tektonobservation_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tektonobservation_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tektonobservation-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-clusterip.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-clusterip.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-clusterip1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-clusterip1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "telegraf-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "telegraf",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "telegraf-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "telegraf",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "appwrite-telegraf",
      "Namespace": "appwrite",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-ns",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-secrets",
      "Namespace": "telegraf-ns",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegraf-config",
      "Namespace": "telegraf-ns",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegraf_deployment_all_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "telegraf",
      "Namespace": "telegraf-ns",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "telegraf",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-config.sops.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-config.sops.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegram-config",
      "Namespace": "observability",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nats-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-secrets.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telegram-secrets.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telegram-secrets",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "productpage",
      "Namespace": "default",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host is disallowed",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "Proc mount must not be changed from the default",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": []
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "productpage-other",
      "Namespace": "other",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host is disallowed",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "Proc mount must not be changed from the default",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": []
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "reviews",
      "Namespace": "default",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host is disallowed",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "Proc mount must not be changed from the default",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": []
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry-selector_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "ratings",
      "Namespace": "default",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host is disallowed",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "Proc mount must not be changed from the default",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": []
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-bridge-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-bridge-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-bridge-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_bridge_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-bridge-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-collector-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-collector-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-collector-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_collector_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-collector-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-output-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-output-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-output-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_output_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-output-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-subscription-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-subscription-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-subscription-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_subscription_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-subscription-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-tenant-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-tenant-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-tenant-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/telemetry_tenant_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "telemetry-tenant-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-disk.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-disk.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "workload-2-disk",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "workload",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-mem-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-mem-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "temp-mem-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mem-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "temp-pod1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "temp-container1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "temp-container2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 49
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-pod11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp-pod11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "temp-pod1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "temp-container1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "temp-container2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 49
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-nautilus",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kiada-001",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kiada",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "envoy",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "provisioner-role",
      "Namespace": "operators",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "provisioner-role-binding",
      "Namespace": "operators",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kiada-001",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kiada",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "envoy",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-alertmanager",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-kube-state-metrics",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-server",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-alertmanager",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-alertmanager-headless",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-kube-state-metrics",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-node-exporter",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-pushgateway",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-server",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "release-name-prometheus-node-exporter",
      "Namespace": "default",
      "Kind": "DaemonSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will not be automounted",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network should not be configured",
            "Details": null,
            "Success": false,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID should not be configured",
            "Details": null,
            "Success": false,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "node-exporter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 63
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "release-name-kube-state-metrics",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kube-state-metrics",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation not allowed",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 76
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "release-name-prometheus-pushgateway",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pushgateway",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 63
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-node-exporter",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "release-name-prometheus-server",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "prometheus-server-configmap-reload",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "prometheus-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "release-name-alertmanager",
      "Namespace": "default",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "alertmanager",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 65
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-pushgateway",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-server",
      "Namespace": "default",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-alertmanager",
      "Namespace": "default",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-kube-state-metrics",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-prometheus-server",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-1_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "release-name-kube-state-metrics",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "bar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "bar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "bar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-deploy3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "bar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "\u003cunique name\u003e",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template-service3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "foo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template_mongo.secret.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template_mongo.secret.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template_mongo.secret1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/template_mongo.secret1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "otel-tempo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tempo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-claim0",
      "Namespace": "obs",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-claim1",
      "Namespace": "obs",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "obs",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tempo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-yml",
      "Namespace": "obs",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo12_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "obs",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-config-cm",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tempo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo15_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "tempo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tempo_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tempo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temps-service-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temps-service-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "temperature-service",
      "Namespace": "temp-calculator",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "temperature-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temps-service-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temps-service-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "temperature-service",
      "Namespace": "temp-calculator",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-nautilus",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pod-nautilus",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "container-nautilus",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_data_mlflow_pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_data_mlflow_pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "temp-data-for-mlflow",
      "Namespace": "airflow",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_depl.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_depl.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_depl2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_depl2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment-post-snapshot",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/temp_pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "temp-pod",
      "Namespace": "\u003cns\u003e",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "temp-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant-01.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant-01.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "vcluster-tenant-01",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-public",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-budget",
      "Namespace": "",
      "Kind": "PodDisruptionBudget",
      "Results": {
        "pdbDisruptionsIsZero": {
          "ID": "pdbDisruptionsIsZero",
          "Message": "Voluntary evictions are possible",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant11_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "tenant1",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "cockroachdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 69
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-public",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-budget",
      "Namespace": "",
      "Kind": "PodDisruptionBudget",
      "Results": {
        "pdbDisruptionsIsZero": {
          "ID": "pdbDisruptionsIsZero",
          "Message": "Voluntary evictions are possible",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant21_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "tenant2",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "cockroachdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 69
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ServiceAccount",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Role",
      "Results": {
        "rolePodExecAttach": {
          "ID": "rolePodExecAttach",
          "Message": "The Role does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "RoleBinding",
      "Results": {
        "rolebindingClusterAdminClusterRole": {
          "ID": "rolebindingClusterAdminClusterRole",
          "Message": "The RoleBinding does not reference the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterAdminRole": {
          "ID": "rolebindingClusterAdminRole",
          "Message": "The RoleBinding references a Role with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingClusterRolePodExecAttach": {
          "ID": "rolebindingClusterRolePodExecAttach",
          "Message": "The RoleBinding does not reference a ClusterRole allowing pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "rolebindingRolePodExecAttach": {
          "ID": "rolebindingRolePodExecAttach",
          "Message": "The RoleBinding references a Role that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "ClusterRoleBinding",
      "Results": {
        "clusterrolebindingClusterAdmin": {
          "ID": "clusterrolebindingClusterAdmin",
          "Message": "The ClusterRoleBinding references the default cluster-admin ClusterRole or one with wildcard permissions",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        },
        "clusterrolebindingPodExecAttach": {
          "ID": "clusterrolebindingPodExecAttach",
          "Message": "The ClusterRoleBinding references a ClusterRole that allows Pods/exec, allows pods/attach, or that does not exist",
          "Details": null,
          "Success": false,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-public",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cockroachdb-budget",
      "Namespace": "",
      "Kind": "PodDisruptionBudget",
      "Results": {
        "pdbDisruptionsIsZero": {
          "ID": "pdbDisruptionsIsZero",
          "Message": "Voluntary evictions are possible",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T13:14:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/tenant31_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "cockroachdb",
      "Namespace": "tenant3",
      "Kind": "StatefulSet",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "cockroachdb",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 69
}
]
