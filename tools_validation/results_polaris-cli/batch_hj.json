[
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc671.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc671.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "appName101-config",
      "Namespace": "appNamespace101",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc672.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc672.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc673.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc673.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-pvc",
      "Namespace": "argocd",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC674.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC674.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc-nfs-data",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc675.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc675.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "murali",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc676.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc676.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "murali",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc677.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc677.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc678.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc678.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc679.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc679.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc68.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc68.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc-claim",
      "Namespace": "development",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc680.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc680.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logstash-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc681.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc681.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc682.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc682.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc683.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc683.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc684.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc684.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc686.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc686.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pvc",
      "Namespace": "standard",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc688.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc688.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-disk-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc69.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc69.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc690.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc690.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc692.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc692.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgresql-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc693.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc693.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc694.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc694.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc695.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc695.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "webapp-nfs-pvc",
      "Namespace": "webapp",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc696.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc696.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc698.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc698.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "safari-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc70.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc70.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-one",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc702.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc702.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc703.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc703.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc706.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc706.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-gyeonggi-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-gangwon-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-chungcheong-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-gyeongsang-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-jeolla-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc707_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-jeju-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc708.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc708.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "extra-storage",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc709.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc709.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "goserver-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc710.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc710.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mariadb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc711.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc711.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "uptime-kuma-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc712.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc712.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc713.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc713.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "minecraft-data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc714.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc714.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc715.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc715.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc716.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc716.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodump",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc717.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc717.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-pvc-sc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc718.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc718.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "claim-log-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc719.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc719.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc720.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc720.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc721.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc721.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc722.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc722.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jekyll-site",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc723.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc723.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc724.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc724.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "backend",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc725.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc725.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "k8s-resume-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc726.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc726.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc727.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc727.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "localpv-vol",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc728.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc728.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "librespeed-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc729.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc729.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-ebs-dynamic",
      "Namespace": "jenkins",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc730.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc730.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "volume-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc731.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc731.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc732.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc732.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "volume-db",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc732_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc732_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "volume-wp",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc733.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc733.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-root",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc734.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc734.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "coit-frontend-fast",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc735.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc735.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "coit-frontend-fast",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc736.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc736.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-vol",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc737.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc737.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "civo-volume-test",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc739.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc739.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-for-k8Container-app",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc74.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc74.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-hdd",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc740.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc740.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-for-k8Container-app",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc741.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc741.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shared-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc741_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc741_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shared-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc742.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc742.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "api-tester-1231-files",
      "Namespace": "anotherclass-123",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc744.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc744.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pod1-pvc",
      "Namespace": "ksv",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc745.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc745.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gomod-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc746.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc746.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC747.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC747.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backup-data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc749.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc749.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc75.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc75.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-env-mongodb-pvc",
      "Namespace": "qa",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC750.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC750.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backup-data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc751.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc751.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-file",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc753.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc753.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc754.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc754.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "paperless",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc75_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc75_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-env-redis-pvc",
      "Namespace": "qa",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc76.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc76.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc765.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc765.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ftp-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc766.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc766.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sampledata",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc767.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc767.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-data-pvc",
      "Namespace": "learning",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc768.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc768.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc77.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc77.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "open-webui-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc770.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc770.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-dep1",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc770_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc770_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc771.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc771.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc772.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc772.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc773.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc773.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc774.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc774.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "paperless-library",
      "Namespace": "paperless",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc774_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc774_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "paperless-pg-data",
      "Namespace": "paperless",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:43:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc775.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc775.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-web",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc776.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc776.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "dynamic-nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc778.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc778.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-claim",
      "Namespace": "\u003cNamespace\u003e",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc779.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc779.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "efs-claim",
      "Namespace": "\u003cNamespace\u003e",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc780.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc780.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "goserver-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc781.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc781.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc782.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc782.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "demo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc783.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc783.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc784.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc784.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc785.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc785.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ecodms-data",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc786.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc786.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "microk8s-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc787.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc787.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "meu-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc788.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc788.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc789.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc789.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysqlclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc79.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc79.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysqlbackup-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc790.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc790.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "meu-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc791.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc791.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-data-pvc",
      "Namespace": "prometheus",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc791_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc791_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana-data-pvc",
      "Namespace": "prometheus",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc792.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc792.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pvc",
      "Namespace": "django-app",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc794.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc794.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "login-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc798.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc798.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc799.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc799.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-pvc",
      "Namespace": "3-tier-app",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mikes-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc80.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc80.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "new-data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc800.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc800.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mealie-data",
      "Namespace": "mealie",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc801.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc801.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bazarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc802.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc802.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jellyfin-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc803.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc803.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prowlarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc804.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc804.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc805.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc805.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "radarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc806.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc806.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "readarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc807.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc807.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sonarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc808.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc808.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shiori-data",
      "Namespace": "shiori",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc809.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc809.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "traggo-data",
      "Namespace": "traggo",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:02+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc81.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc81.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc810.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc810.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jfrog",
      "Namespace": "artifactory",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc811.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc811.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc812.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc812.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc813.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc813.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backup-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc814.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc814.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc815.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc815.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc816.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc816.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backstage",
      "Namespace": "backstage",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc817.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc817.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc818.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc818.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kuma-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc819.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc819.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qinglong-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:03+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc82.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc82.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "azure-managed-disk",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc820.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc820.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "alist-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc821.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc821.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc822.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc822.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc823.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc823.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "disk-windows",
      "Namespace": "kubevirt",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-nfs",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-cephfs",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-localpath",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-ceph-block-duplicated-nvme",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-ceph-block-replicated-nvme",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc824_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kbench-pvc-unas-smb",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:04+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc825.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc825.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc826.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc826.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "zwave-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc827.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc827.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "overseerr-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc828.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc828.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc829.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc829.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "radarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc83.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc83.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "safari-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc830.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc830.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sonarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc836.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc836.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "strategy-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc837.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc837.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "strategy-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc838.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc838.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-claim",
      "Namespace": "longhorn-test",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc839.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc839.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "imagecropper-data",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc84.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc84.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "safari-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:05+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc840.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc840.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "general-pipeline",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc841.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc841.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "standard-rwo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc842.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc842.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "standard-rwo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc843.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc843.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc844.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc844.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myebsvol-pv-claim2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc845.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc845.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myapp-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc846.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc846.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc847.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc847.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-claim-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc849.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc849.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc85.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc85.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mikes-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc850.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc850.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc851.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc851.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:06+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc852.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc852.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc853.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc853.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc854.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc854.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "claim-log-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc855.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc855.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv0001",
      "Namespace": "web-app01",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc855_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc855_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv0001-pv-claim",
      "Namespace": "web-app01",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc856.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc856.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kube-dump",
      "Namespace": "kube-dump",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc857.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc857.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc858.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc858.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kube-dump",
      "Namespace": "kube-dump",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc86.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc86.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "local-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc860.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc860.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-pvc1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc861.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc861.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc864.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc864.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "staticfiles-pvc",
      "Namespace": "django",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:07+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc864_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc864_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "staticfiles-pv",
      "Namespace": "django",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc865.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc865.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "redis-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc866.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc866.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "argocd-pvc",
      "Namespace": "argocd",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc867.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc867.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "awx-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc868.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc868.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "elasticsearch-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc869.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc869.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kibana-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc87.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc87.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-claim-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc870.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc870.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logstash-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc871.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc871.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana-pvc",
      "Namespace": "grafana",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc872.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc872.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "homepage-pvc",
      "Namespace": "homepage",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc873.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc873.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:08+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc874.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc874.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc875.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc875.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prometheus-pvc",
      "Namespace": "prometheus",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc876.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc876.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc877.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc877.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "traefik-nfs-pvc",
      "Namespace": "kube-system",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc878.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc878.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "airflow-log",
      "Namespace": "airflow",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc88.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc88.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "volume-demo-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc880.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc880.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc881.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc881.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-mysql-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc882.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc882.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc883.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc883.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-web",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc884.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc884.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc885.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc885.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "demo-managed-disk",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:09+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc886.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc886.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "standard-rwo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc887.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc887.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "standard-rwo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc888.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc888.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysql-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc889.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc889.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc889_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc889_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "config-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc890.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc890.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "logs-checker",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc891.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc891.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "storage-filler",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc892.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc892.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc893.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc893.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "backup-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc898.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc898.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "worker-01-postgresql-backup",
      "Namespace": "postgres-backup",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "worker-02-postgresql-backup",
      "Namespace": "postgres-backup",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:10+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc899_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "worker-03-postgresql-backup",
      "Namespace": "postgres-backup",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "local-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc901.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc901.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc902.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc902.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-primary-v1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc902_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc902_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-backups-v1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc903.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc903.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgresql-primary-v1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc903_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc903_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgresql-backups-v1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc904.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc904.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc905.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc905.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc906.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc906.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ollama-models",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc907.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc907.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "stablediffusion-checkpoints",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:11+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc908.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc908.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc909.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc909.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "meu-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc91.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc91.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc915.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc915.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc916.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc916.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc917.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc917.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "minio",
      "Namespace": "minio",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc918.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc918.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb",
      "Namespace": "mongodb",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc919.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc919.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "minio",
      "Namespace": "minio",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc92.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc92.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "fileshare",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc920.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc920.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb",
      "Namespace": "mongodb",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc921.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc921.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc922.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc922.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:12+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc923.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc923.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "grafana",
      "Namespace": "monitoring",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc924.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc924.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "minio",
      "Namespace": "minio",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc925.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc925.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc926.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc926.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "factorio-pvc",
      "Namespace": "factorio",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc927.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc927.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "octoprint-pvc",
      "Namespace": "octoprint",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc928.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc928.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "snippet-box-pvc",
      "Namespace": "snippet-box",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc929.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc929.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "technitium-dns-pvc-config",
      "Namespace": "technitium-dns",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc93.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc93.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "csi-cephfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc930.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc930.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc931.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc931.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc932.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc932.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "goserver-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc933.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc933.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:13+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc934.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc934.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jupyterhub-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc935.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc935.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "httpd-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc936.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc936.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "meu-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc937.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc937.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "local",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc938.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc938.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "persistent-volume-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc939.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc939.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-for-k8-container-app",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc94.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc94.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rbd-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc940.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc940.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-for-k8-container-app",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc941.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc941.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "${APP}",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc942.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc942.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "model-pvc",
      "Namespace": "kubeflow",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc943.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc943.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgresql-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:14+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc946.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc946.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc949.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc949.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "certs",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc95.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc95.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc950.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc950.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc956.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc956.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bazarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc957.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc957.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "deluge-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc958.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc958.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lidarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc959.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc959.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "overseerr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc96.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc96.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "persistent-volume",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc960.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc960.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "prowlarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc961.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc961.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "radarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc962.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc962.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "readarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:15+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc963.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc963.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sabnzbd-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc964.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc964.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sonarr-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc965.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc965.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tautulli-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc966.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc966.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nextcloud-data",
      "Namespace": "nextcloud",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc967.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc967.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-new-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc968.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc968.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bazarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc969.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc969.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "overseerr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc969_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc969_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "overseerr-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc970.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc970.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "radarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc971.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc971.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sabnzbd",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc972.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc972.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "sonarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc973.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc973.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wizarr",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:16+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc974.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc974.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "${APP}",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc975.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc975.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kometa",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc976.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc976.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "metube",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc977_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex-posters",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc978.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc978.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "${APP}",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc979.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc979.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "tautulli",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc98.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc98.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "primeiro-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc980.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc980.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "${APP}",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc984.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc984.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-volume-claim",
      "Namespace": "three-tier",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:17+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc985.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc985.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "{name}",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc987.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc987.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc988.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc988.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-azure-disk",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc989.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc989.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-azure-disk",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc99.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc99.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "goserver-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc990.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc990.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc991.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc991.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-static",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-static-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc992_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc993.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc993.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-pvc",
      "Namespace": "volumes",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc994.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc994.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgresql-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc995.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc995.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:18+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc996.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc996.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mysqlclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc997.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc997.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc998.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc998.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc999.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc999.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "meu-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcAndSc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcAndSc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-sc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcbackup-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcbackup-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcbackup-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcbackup_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcbackup-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVClaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVClaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvClaim1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvClaim1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:19+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-bbdd",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVClaim_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVClaim_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongodb",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "azurefile-csi-nfs",
      "Namespace": "bold-services",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "azurefile-csi-nfs",
      "Namespace": "bold-services",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver",
      "Namespace": "bold-services",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver-claim",
      "Namespace": "bold-services",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver",
      "Namespace": "bold-services",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_azure_nfs_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver-claim",
      "Namespace": "bold-services",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-storageclass",
      "Namespace": "bold-services",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-storageclass",
      "Namespace": "bold-services",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver",
      "Namespace": "bold-services",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver-claim",
      "Namespace": "bold-services",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:20+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver",
      "Namespace": "bold-services",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvclaim_onpremise_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "bold-fileserver-claim",
      "Namespace": "bold-services",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcmongo.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcmongo.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvCreateLocal.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvCreateLocal.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv01",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_editor_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_editor_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcrestore-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_editor_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_editor_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcrestore-editor-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_viewer_role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_viewer_role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcrestore-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_viewer_role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcrestore_viewer_role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvcrestore-viewer-role",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "docker-reg-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "docker-auth-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "plex-cache",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcs4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "raemond-pvc-sc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:21+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvctest.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvctest.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-test",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcWithSC.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcWithSC.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "aws-pvc-sc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcwordpress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcwordpress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpresspvc",
      "Namespace": "test",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcwordpress_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvcwordpress_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpresspvc",
      "Namespace": "production",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-quota-demo",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-retain-ssd-storage",
      "Namespace": "default",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "PVC_1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-ebs",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jhooq-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myclaim-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:22+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "vol",
      "Namespace": "default",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-disk-claim-1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-quota-demo-2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "log-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "PVC_2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "myclaim-2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gce-storage",
      "Namespace": "default",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-disk-claim-2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "thin",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_cache-storage.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_cache-storage.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cache-storage",
      "Namespace": "github-actions",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:23+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_cache-storage1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_cache-storage1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "cache-storage",
      "Namespace": "github-actions",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_datasource_snapshot.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_datasource_snapshot.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-sts-mysql-local-0-restore",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pvc-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongo-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 44
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "jenkins-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "jenkins",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 74
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_Deployment_Service_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "jenkins-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_example3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_nfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_nfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_persistent_volume claim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_persistent_volume claim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-name-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:24+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_SC(custom).yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_SC(custom).yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "testns",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_SC(default).yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVC_SC(default).yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc",
      "Namespace": "testns",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_sc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_sc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypvc-sc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_storage_class.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_storage_class.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-slow",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_storage_class1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_storage_class1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-slow",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_test1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_test1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-pvc",
      "Namespace": "default",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_wordpress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_wordpress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpress-pvc",
      "Namespace": "wp-projeto",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_wordpress1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvc_wordpress1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpress-pvc",
      "Namespace": "wp-projeto",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve",
      "Namespace": "network",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve2",
      "Namespace": "network",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve2",
      "Namespace": "network",
      "Kind": "Endpoints",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve2",
      "Namespace": "network",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:25+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve",
      "Namespace": "network",
      "Kind": "Endpoints",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pve_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "lan-pve",
      "Namespace": "network",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:26+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvl-controller-role9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "system:controller:pvl-controller",
      "Namespace": "",
      "Kind": "ClusterRole",
      "Results": {
        "clusterrolePodExecAttach": {
          "ID": "clusterrolePodExecAttach",
          "Message": "The ClusterRole does not allow pods/exec or pods/attach",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvnfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvnfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvnfs",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvnfs10gb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvnfs10gb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvnfs10gb",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvvol-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvvol-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PVol2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvvol-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvpod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvpod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "my-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvpod2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvpod2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "my-pod1",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-0",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-0",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:27+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim3",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim4",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim5",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgress-pv-volume",
      "Namespace": "backend",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres-pv-claim",
      "Namespace": "backend",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "raemond-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssa",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssa",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssb.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssb.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssb",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvssc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssc",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:28+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssb",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvss_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvssc",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-1",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvs_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-postgres-2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvtest.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvtest.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvtest1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvtest1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvWithSC.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvWithSC.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "aws-pv-sc",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvwordpress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pvwordpress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wordpresspv",
      "Namespace": "test",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "monitoring",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:29+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "hostpath2",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "vol",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "log-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-persistent-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pv-filesystem",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "test-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-vol",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:30+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gke-node-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gke-node-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gke-node-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_and_pvc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "gke-node-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ebs-sc",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "block-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_claim_config_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "app",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_nfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_nfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mypv-nfs-data",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_persistent_volume.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_persistent_volume.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-name-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "store-persistent-volume",
      "Namespace": "test",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "store-persistent-volume-claim",
      "Namespace": "test",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:31+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-selector-example",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pvc-selector-example",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "hostpath",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-storage",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-storage-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "data-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:32+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath1_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath2_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:33+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath3_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-hostpath",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_hostpath_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:34+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-nginx-nfs-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-nginx-nfs-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs1_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-nginx-nfs-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-nginx-nfs-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs2_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:35+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-nginx-nfs-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-nginx-nfs-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs3_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nfs-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hello-nginx-nfs-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "hello-nginx-nfs-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_nfs_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-persistent-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "my-persistent-volumeclaim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PV_PVC_Pod1_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myvolumes-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "myvolumes-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:36+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_pvc_pod_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "example-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_sample_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "example-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_wordpress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_wordpress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wp-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_wordpress_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pv_wordpress_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "wp-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pwru.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pwru.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pwru",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network should not be configured",
            "Details": null,
            "Success": false,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID should not be configured",
            "Details": null,
            "Success": false,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pwru",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Should not be running as privileged",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 30
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PW_King-deployment-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PW_King-deployment-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "only-service-4",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PW_King-deployment-service_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PW_King-deployment-service_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "only-deployment-4",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "app-vjp-image23",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "px-kafka",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:37+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "apache",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "apache",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "invoicing",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "kafka-service",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "load-test",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "order",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "postgres",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shipping",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "zookeeper",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "invoicing",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wait-invoicing",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "invoicing",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kafka",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "kafka",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "load-test",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "load-test",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:38+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "order",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wait-order",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "order",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "postgres",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "postgres",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "shipping",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wait-shipping",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "shipping",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "zookeeper",
      "Namespace": "px-kafka",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "zookeeper",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-kafka_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "apache",
      "Namespace": "px-kafka",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "px-sock-shop",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "carts",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "carts",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "queue-master",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "queue-master",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 69
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "rabbitmq",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "rabbitmq",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "rabbitmq-exporter",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 54
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "session-db",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "session-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:39+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "shipping",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "shipping",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "user",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "user",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 81
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "user-db",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "user-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "carts",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "carts-db",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "catalogue",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "catalogue-db",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "carts-db",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "carts-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "front-end",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "orders",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:40+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "orders-db",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_23.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_23.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "payment",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_24.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_24.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "queue-master",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "rabbitmq",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "session-db",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_27.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_27.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shipping",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_28.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_28.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_29.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_29.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "user-db",
      "Namespace": "px-sock-shop",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "catalogue",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "catalogue",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 81
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "catalogue-db",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "catalogue-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "front-end",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "front-end",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 81
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:41+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "load-test",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "wait-sock-shop",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "load-test",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "orders",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "orders",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 80
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_8.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_8.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "orders-db",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "orders-db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_9.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/px-sock_9.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "payment",
      "Namespace": "px-sock-shop",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "payment",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container does not have any insecure capabilities",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "One of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities are used to restrict containers using unwanted privileges",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem is read only",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Is not allowed to run as root",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 81
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend-tc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend-tc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxbbq-web",
      "Namespace": "trashcan",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxbbq-web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend-tc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend-tc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxbbq-svc",
      "Namespace": "trashcan",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxbbq-web",
      "Namespace": "pxbbq",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxbbq-web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-frontend_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxbbq-svc",
      "Namespace": "pxbbq",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-restore.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-restore.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "pxbbq",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 51
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-restore_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-restore_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "pxbbq",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "trashcan",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:42+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "trashcan",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 51
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo-tc_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "trashcan",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongodb-pvc",
      "Namespace": "pxbbq",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "pxbbq",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "mongo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 51
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxbbq-mongo_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "mongo",
      "Namespace": "pxbbq",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-cluster",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-cluster",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-cluster-service2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-cluster",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:43+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node12_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node12_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node1",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node21_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node21_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node22.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node22.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node22_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node22_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node2",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:44+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node31_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node31_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node32_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node32_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pxc-node3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pxc-node3",
      "Namespace": "",
      "Kind": "ReplicationController",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pxc-node3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pyaes-hpa",
      "Namespace": "openfaas-fn",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pyaes",
      "Namespace": "openfaas-fn",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pyaes",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 59
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyaes_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pyaes-external",
      "Namespace": "openfaas-fn",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pykmip-server.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pykmip-server.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pykmip-server",
      "Namespace": "kmip",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pykmip-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pyspark-notebook",
      "Namespace": "default",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pyspark-notebook",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 44
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-job.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-job.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pyspark-job",
      "Namespace": "",
      "Kind": "Job",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pyspark",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pyspark-service",
      "Namespace": "default",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:45+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/pyspark.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pyspark-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pyspark",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-app-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-app2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-deploy",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-local-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-local-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-local",
      "Namespace": "services",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-local",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-pod.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-pod.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-service",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service-tcp-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service-tcp-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-service-tcp",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:46+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-svc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-svc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-svc",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-to-do.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-to-do.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-to-do",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-to-do",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 61
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-to-do_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-to-do_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-to-do",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-todo-app.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-todo-app.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "todo",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-todo-app_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python-todo-app_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "todo",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "check-db",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "python-todo",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PythonApp-Deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PythonApp-Deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-app-development",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "python-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PythonApp-Deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/PythonApp-Deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-app-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:47+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_app_deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_app_deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "python-web-app-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_app_service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_app_service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "python-web-app-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "pythonapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "pythonapp",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/python_deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pythonapp-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q06.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q06.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-pvc",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-pvc",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q09.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q09.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "shared",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q09_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q09_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "app-data",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busy-time",
      "Namespace": "busy",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busy-time-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "application",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "application",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "backend",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "backend",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q101_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "frontend",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "frontend",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:48+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q10_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q10_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "web-server",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-web-server",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-web-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "project-a",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "project-b",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "project-c",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "db-pod",
      "Namespace": "project-a",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "db-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service-pod",
      "Namespace": "project-b",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "web-pod",
      "Namespace": "project-b",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_6.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q111_6.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "application-pod",
      "Namespace": "project-c",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "application-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "non-persistent-redis",
      "Namespace": "staging",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "non-persistent-redis",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q121.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q121.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "multi-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web-pod",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:49+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q13-Solution.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q13-Solution.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "my-job",
      "Namespace": "",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busy-job",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "application",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "application",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "service",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "service",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "db",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "db",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container sets potentially sensitive environment variables",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q17_3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "web",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "web",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "big-corp-app",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "big-corp-app",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "manual",
      "Namespace": "",
      "Kind": "StorageClass",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q20-2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q20-2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "multi-cont-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "multi-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox-container1",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "busybox-container2",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "busybox-container3",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 40
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q25.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q25.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kucc8",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "redis",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "memcached",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 40
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:50+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q26.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q26.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kual00201",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q2_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q2_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pvc-volume",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "neb-new-job",
      "Namespace": "ckad-practice",
      "Kind": "Job",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "neb-new-job-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q32.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q32.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "nginx-kusc00401",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx-kusc00401",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "production",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "frontend",
      "Namespace": "production",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "hungry-bear",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "create",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "checker",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "init-cont-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "init-container",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "main-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 47
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q50-3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "myapp-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "init-myservice",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "myapp-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 54
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:51+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q51.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q51.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "production",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q51_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q51_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "frontend",
      "Namespace": "production",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/q5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pvc-cliam",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-volume",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "task-pv-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q7_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "task-pv-pod",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "task-pv-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "web-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "web-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/Q8-Part6-Solution_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "web-deploy",
      "Namespace": "production",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-database-migration-job.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-database-migration-job.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qa-api-database-migration-job",
      "Namespace": "",
      "Kind": "Job",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qa-api-database-migrations",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-deployment-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-deployment-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-api-deployment-hpa",
      "Namespace": "",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:52+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qa-api-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qa-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-api-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-api-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-app-ingress",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-deployment-hpa.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-deployment-hpa.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-ui-deployment-hpa",
      "Namespace": "",
      "Kind": "HorizontalPodAutoscaler",
      "Results": {
        "hpaMaxAvailability": {
          "ID": "hpaMaxAvailability",
          "Message": "HPA has a valid max and min replica configuration",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "hpaMinAvailability": {
          "ID": "hpaMinAvailability",
          "Message": "HPA minReplicas should be 2 or more",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qa-ui-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qa-ui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa-ui-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa-ui-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 1,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qa",
      "Namespace": "",
      "Kind": "Namespace",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa5.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa5.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "ui-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa5_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qa5_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "react-ui-dep",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Multiple replicas are scheduled",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "react-ui",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 64
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim0-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim0-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim0",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim1-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim1-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim1",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:53+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim2-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim2-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim2",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim3-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim3-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim3",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim4-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim4-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim4",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim5-persistentvolumeclaim.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-claim5-persistentvolumeclaim.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-claim5",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-configmap.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-configmap.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorent-env",
      "Namespace": "media",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qbittorrent",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qbittorrent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qbittorrent",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qbittorrent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-deployment2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qbittorrent-vpn",
      "Namespace": "media",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes must be forbidden",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "gluetun-sync",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "curl-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "gluetun",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container should not have dangerous capabilities",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/2/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "qbittorrent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/3/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 36
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-ingress.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-ingress.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent",
      "Namespace": "media",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress has TLS configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc-config.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc-config.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbit-config",
      "Namespace": "media",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-download-pv",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:54+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-pvc_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-download-pvc",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service-ui.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service-ui.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-ui",
      "Namespace": "media",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent-service1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qbittorrent-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "gluetun",
            "Results": {
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container should not have dangerous capabilities",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/initContainers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "qbittorrent",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 50
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent4.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent4.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-config",
      "Namespace": "",
      "Kind": "PersistentVolume",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent4_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbittorrent4_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbittorrent-config-claim",
      "Namespace": "",
      "Kind": "PersistentVolumeClaim",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools-config.sops.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools-config.sops.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbtools-config-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools.secret.sops.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools.secret.sops.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbtools-config-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools.secret.sops1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qbtools.secret.sops1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qbtools-secret",
      "Namespace": "",
      "Kind": "Secret",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:55+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qdrant-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qdrant-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qdrant-deployment",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qdrant",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qdrant-deployment_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qdrant-deployment_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qdrant-service",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-besteffort",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-besteffort",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 43
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-besteffort2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-besteffort",
      "Namespace": "qos-example",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-burstable",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-burstable",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-burstable2",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable21.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable21.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-burstable2",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-burstable3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-burstable",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-guaranteed",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:56+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-guaranteed",
      "Namespace": "",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "main",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "sidecar",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 60
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qos-guaranteed2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qos-guaranteed",
      "Namespace": "qos-example",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "nginx",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 62
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm-endpoints.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm-endpoints.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qotm",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm-endpoints_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm-endpoints_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qotm",
      "Namespace": "",
      "Kind": "Endpoints",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quote",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "backend",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 53
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qotm_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quote",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qrgen-deploy.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qrgen-deploy.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "qrgen",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "qrgen",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 55
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qrgen-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/qrgen-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "qrgen",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quake",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "games-ingress-quake",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quake",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "content-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:57+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quake",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          },
          {
            "Name": "content-server",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/1/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quake",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake31_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quake3-server-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quake",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake3_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quake3-server-config",
      "Namespace": "",
      "Kind": "ConfigMap",
      "Results": {
        "sensitiveConfigmapContent": {
          "ID": "sensitiveConfigmapContent",
          "Message": "The ConfigMap does not contain potentially sensitive content in its keys and values",
          "Details": null,
          "Success": true,
          "Severity": "danger",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quakes-api.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quakes-api.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quakes-api",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "quakes-api",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 68
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quake_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "games-ingress-quake",
      "Namespace": "",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quality-definition-resizings1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quality-definition-resizings1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "sonarr-quality-definitions",
      "Namespace": "downloads",
      "Kind": "CronJob",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "sonarr-curl",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus-deployment.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus-deployment.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quarkus",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "quarkus",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port should not be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 45
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus-service.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus-service.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quarkus",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "quarkusapp",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quarkusapp",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "quarkus",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 56
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:58+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus_2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quarkus_2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "nginx-quarkus-ingress",
      "Namespace": "default",
      "Kind": "Ingress",
      "Results": {
        "tlsSettingsMissing": {
          "ID": "tlsSettingsMissing",
          "Message": "Ingress does not have TLS configured",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Security",
          "Mutations": null
        }
      },
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 0
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quartered.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quartered.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "quartered-stress",
      "Namespace": "",
      "Kind": "Job",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "stress-ng-container",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests are set",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 66
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quay-io1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quay-io1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "busybox-quay-io",
      "Namespace": "delta",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quay-io1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/quay-io1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "kiali-quay-io",
      "Namespace": "delta",
      "Kind": "Pod",
      "Results": {
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "busybox",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy is \"Always\"",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag is specified",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 57
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe is configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 52
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl10.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl10.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl10_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl10_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl11.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl11.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl11_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl11_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-clusterip-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl12.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl12.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:44:59+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl12_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl12_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl13.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl13.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl13_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl13_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl14.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl14.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl14_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl14_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl15.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl15.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl15_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl15_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl16.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl16.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl16_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl16_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl17.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl17.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl17_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl17_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl18.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl18.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:00+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl18_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl18_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl19.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl19.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl19_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl19_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl1_1.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl1_1.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 0
  },
  "Results": [
    {
      "Name": "query-srv",
      "Namespace": "",
      "Kind": "Service",
      "Results": {},
      "PodResult": null,
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 100
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl2.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl2.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
,
{
  "PolarisOutputVersion": "1.0",
  "AuditTime": "2025-06-16T11:45:01+02:00",
  "SourceType": "Path",
  "SourceName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl20.yaml",
  "DisplayName": "../scriptJsonToUvl/yamls_agrupation/yamls-tools-files/query-depl20.yaml",
  "ClusterInfo": {
    "Version": "unknown",
    "Nodes": 0,
    "Pods": 0,
    "Namespaces": 0,
    "Controllers": 1
  },
  "Results": [
    {
      "Name": "query-depl",
      "Namespace": "",
      "Kind": "Deployment",
      "Results": {
        "deploymentMissingReplicas": {
          "ID": "deploymentMissingReplicas",
          "Message": "Only one replica is scheduled",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "metadataAndInstanceMismatched": {
          "ID": "metadataAndInstanceMismatched",
          "Message": "Label app.kubernetes.io/instance must match metadata.name",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "missingPodDisruptionBudget": {
          "ID": "missingPodDisruptionBudget",
          "Message": "Should have a PodDisruptionBudget",
          "Details": null,
          "Success": false,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        },
        "pdbMinAvailableGreaterThanHPAMinReplicas": {
          "ID": "pdbMinAvailableGreaterThanHPAMinReplicas",
          "Message": "PDB and HPA are correctly configured",
          "Details": null,
          "Success": true,
          "Severity": "warning",
          "Category": "Reliability",
          "Mutations": null
        }
      },
      "PodResult": {
        "Name": "",
        "Results": {
          "automountServiceAccountToken": {
            "ID": "automountServiceAccountToken",
            "Message": "The ServiceAccount will be automounted",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostIPCSet": {
            "ID": "hostIPCSet",
            "Message": "Host IPC is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostNetworkSet": {
            "ID": "hostNetworkSet",
            "Message": "Host network is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPIDSet": {
            "ID": "hostPIDSet",
            "Message": "Host PID is not configured",
            "Details": null,
            "Success": true,
            "Severity": "danger",
            "Category": "Security",
            "Mutations": null
          },
          "hostPathSet": {
            "ID": "hostPathSet",
            "Message": "HostPath volumes are not configured",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "hostProcess": {
            "ID": "hostProcess",
            "Message": "Privileged access to the host check is valid",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "missingNetworkPolicy": {
            "ID": "missingNetworkPolicy",
            "Message": "A NetworkPolicy should match pod labels and contain applied egress and ingress rules",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "priorityClassNotSet": {
            "ID": "priorityClassNotSet",
            "Message": "Priority class should be set",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          },
          "procMount": {
            "ID": "procMount",
            "Message": "The default /proc masks are set up to reduce attack surface, and should be required",
            "Details": null,
            "Success": true,
            "Severity": "warning",
            "Category": "Security",
            "Mutations": null
          },
          "topologySpreadConstraint": {
            "ID": "topologySpreadConstraint",
            "Message": "Pod should be configured with a valid topology spread constraint",
            "Details": null,
            "Success": false,
            "Severity": "warning",
            "Category": "Reliability",
            "Mutations": null
          }
        },
        "ContainerResults": [
          {
            "Name": "query",
            "Results": {
              "cpuLimitsMissing": {
                "ID": "cpuLimitsMissing",
                "Message": "CPU limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "cpuRequestsMissing": {
                "ID": "cpuRequestsMissing",
                "Message": "CPU requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "dangerousCapabilities": {
                "ID": "dangerousCapabilities",
                "Message": "Container does not have any dangerous capabilities",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "hostPortSet": {
                "ID": "hostPortSet",
                "Message": "Host port is not configured",
                "Details": null,
                "Success": true,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "insecureCapabilities": {
                "ID": "insecureCapabilities",
                "Message": "Container should not have insecure capabilities",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "linuxHardening": {
                "ID": "linuxHardening",
                "Message": "Use one of AppArmor, Seccomp, SELinux, or dropping Linux Capabilities to restrict containers using unwanted privileges",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "livenessProbeMissing": {
                "ID": "livenessProbeMissing",
                "Message": "Liveness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "memoryLimitsMissing": {
                "ID": "memoryLimitsMissing",
                "Message": "Memory limits should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "memoryRequestsMissing": {
                "ID": "memoryRequestsMissing",
                "Message": "Memory requests should be set",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Efficiency",
                "Mutations": null
              },
              "notReadOnlyRootFilesystem": {
                "ID": "notReadOnlyRootFilesystem",
                "Message": "Filesystem should be read only",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Security",
                "Mutations": null
              },
              "privilegeEscalationAllowed": {
                "ID": "privilegeEscalationAllowed",
                "Message": "Privilege escalation should not be allowed",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "pullPolicyNotAlways": {
                "ID": "pullPolicyNotAlways",
                "Message": "Image pull policy should be \"Always\"",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": [
                  {
                    "Path": "/spec/template/spec/containers/0/imagePullPolicy",
                    "Op": "add",
                    "Value": "Always",
                    "Comment": ""
                  }
                ]
              },
              "readinessProbeMissing": {
                "ID": "readinessProbeMissing",
                "Message": "Readiness probe should be configured",
                "Details": null,
                "Success": false,
                "Severity": "warning",
                "Category": "Reliability",
                "Mutations": null
              },
              "runAsPrivileged": {
                "ID": "runAsPrivileged",
                "Message": "Not running as privileged",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "runAsRootAllowed": {
                "ID": "runAsRootAllowed",
                "Message": "Should not be allowed to run as root",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "sensitiveContainerEnvVar": {
                "ID": "sensitiveContainerEnvVar",
                "Message": "The container does not set potentially sensitive environment variables",
                "Details": null,
                "Success": true,
                "Severity": "danger",
                "Category": "Security",
                "Mutations": null
              },
              "tagNotSpecified": {
                "ID": "tagNotSpecified",
                "Message": "Image tag should be specified",
                "Details": null,
                "Success": false,
                "Severity": "danger",
                "Category": "Reliability",
                "Mutations": null
              }
            }
          }
        ]
      },
      "CreatedTime": "0001-01-01T00:00:00Z"
    }
  ],
  "Score": 48
}
]
