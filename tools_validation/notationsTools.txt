Pruebas sobre validacion de las herramientas.
Sobre el folder de archivos yamls_complete: 227.020k

0º Herramienta yaml-json: True = 211.836 ,False = 11.299
1º Kube-linter: True = 98.091 ,False = 128928 --- 227.019
2º Kube-score: True = 70.969 ,False = 156.050 --- 227.019
3º Kyverno: True = 1196, False = 592 -- ERROR EN EL PROCESAMIENTO -- No se han guardado ni los resultados...
4º OPA Gatekeeper: Sin un conjunto de politicas claras -- En proceso
5º Kubeconform: True = 223118, False = 3901 --- 227019 --- Comprobar el funcionamiento
6º Kubevious[DEPRECATED]:
7º Polaris: True = 90285, False = 136600 --- 226.885
8º Datree: [DEPRECATED] desde el Junio de 2023
9º Config-Lint: Sin actualizaciones desde Junio de 2020
10º Conftest: True = 117.098, False = 109.121 --- 226.219
11º Terrascan: True = 83.712, False = 143.307 --- 227.019
12º Trivy: True = 82.857, False = 144.176 --- 227.033
13º Checkov:
14º kubernetes-validate:




Pruebas sobre validacion de las herramientas.
Sobre el folder de archivos small: 1788

0º Herramienta yaml-json = 
1º Kube-linter: True = 1189 ,False = 599
2º Kube-score: True = 1176 ,False = 612
3º Kyverno: True = 1196, False = 592
4º OPA Gatekeeper: Sin un conjunto de politicas claras
5º Kubeconform: True = 1200, False = 588
6º Kubevious[DEPRECATED]:
7º Polaris: True = 1155, False = 633
8º Datree: [DEPRECATED] desde el Junio de 2023
9º ConfigLint: Sin actualizaciones desde Junio de 2020
10º: Conftest: True = 1529, False = 259
10-1º: Conftest01: True = 1485, False = 303

11º Terrascan: True = 1208, False = 580
12º Trivy: True = 1079, False = 710

Referencias URL:

KubeLinter [
https://thomasthornton.cloud/2024/01/31/enforcing-kubernetes-best-practices-and-simplifying-kubernetes-configuration-validation-with-kube-linter-and-github-actions/
https://devopslearning.medium.com/end-to-end-llmops-pipeline-part-7-validating-kubernetes-manifests-with-kube-score-fa60a19f6581

https://github.com/zegl/kube-score?tab=readme-ov-file



Dowload kube-score:
https://github.com/zegl/kube-score/releases
]

Otros:
https://medium.com/@dangreenlee_/continually-validate-kubernetes-manifests-using-kubeconform-and-githubactions-ed74ed3ba4ca

**Kyverno
Se ha descargado directamente el ejecutable y se ha usado Kyverno CLI para la validacion de los YAMLS. Requiere de politicas para validar... se ha usado el folder por defecto Best Practices.
Por el momento, la que mas tarda en validar... apply en cada archivo y comprobar todas las politicas de best-practices...aunmenta el t de validacion estatica:: Muchos minutos solo para 1.7k de archivos
https://kyverno.io/docs/introduction/#quick-start
Descarga del ejecutable desde: https://github.com/kyverno/kyverno/releases
Politicas por defecto y usadas: https://kyverno.io/policies/?policytypes=validate
Repo politicas: https://github.com/kyverno/policies?tab=readme-ov-file

:: Resumen de resultados bastante "escueto" solo se muestran errores en las politicas no cumplidas pero no con los archivos que fallan ni cuantos fallan o no.
Resumen orientado a politicas pero no a validacion de archivos.
Esto provoca que se tenga que realizar la "validacion" archivo x archivo lo cual aumenta bastante el tiempo de procesamiento. En las pruebas se han registrado
batch_aa,4304723
batch_ab,4227982
batch_ac,4204199
Que son mas de 1h.
**Gatekeeper
La herramienta a ver ahora es Gatekeeper, como en la anterior se ha descargado el ejecutable del CLI directamente para evaluar los ficheros YAML localmente. En este caso
se llama gator CLI.
The gator CLI is a tool for evaluating Gatekeeper ConstraintTemplates and Constraints in a local environment.
Instalacion final mediante Go y el comando: go install github.com/open-policy-agent/gatekeeper/v3/cmd/gator@master
Repo de las politicas por defecto: https://github.com/open-policy-agent/gatekeeper-library.git


Gatekeeper, gator. Al no tener unas politicas definidas/predeterminadas se estan usando las localizadas en el repositorio de gatekeeper-library/library/general/ pero
parece que no funcionan del todo bien... No invalidan ningun archivo de los que se ha probado.. ** Revisar.  

Se ha dejado por el momento la validacion con gator ya que suponia generar un conjunto de politicas en un folder personalizado. Lo unico es que politicas meter y para que,
no se sabe de cara a unas politicas con caracter "general" y que funcione como una métrica válida.

Comandos probados: gator test --filename=pod.yaml -f=gatekeeper-library/library/general/ --output=json, gator test --filename=manifests_yamls/ -f=gatekeeper-library/library/general/ --output=json

Tiempo agregado a kubeLinter pero no a los demas. =! implementacion por el conjunto de carpetas..

** kubeconform
Se usa una validacion por carpeta, proceso similar al de KubeLinter. Se instalo directamente con Go, salida en formato json...

https://github.com/yannh/kubeconform?tab=readme-ov-file#Installation

2 tipos de errores: statusError-mayoritario, statusInvalid-minoritario
Se ha agregado el tiempo medio por igual en los casos de valid true y False.


** Kubevious:

Repo: https://github.com/kubevious/kubevious
https://github.com/kubevious/cli
Kubernetes without disasters
Kubevious CLI is a standalone tool that validates YAML manifests for syntax, semantics, conflicts, compliance, and security best practices violations
Instalacion kubevious-win-x64.exe:
 https://github.com/kubevious/cli?tab=readme-ov-file#-option-3-precompiled-binaries

Actualmente no es práctico ni confiable validar manifiestos offline con Kubevious CLI usando lint o guard, al menos no con versiones modernas de Kubernetes.
Para nuestro objetivo de validación estructural y semántica sería mejor usar datree (aparte de kubeconform y kube-score), que también aplica políticas de buenas prácticas y es muy completo.


** Polaris:
https://polaris.docs.fairwinds.com/
Polaris is an open source policy engine for Kubernetes that validates and remediates resource configuration.
It includes 30+ built in configuration policies, as well as the ability to build custom policies with JSON Schema
https://polaris.docs.fairwinds.com/infrastructure-as-code/#install-the-cli
Polaris can be used on the command line to audit local Kubernetes manifests stored in YAML files.
This is particularly helpful for running Polaris against your infrastructure-as-code as part of a CI/CD pipeline.
https://polaris.docs.fairwinds.com/cli/
Descarga desde el release.
https://github.com/fairwindsops/polaris/releases

Se ejecuta individualmente ya que, aunque permita la ejecucion por carpeta solo muestra un resumen de todos los resultados
unificados, siendo imposible comprobar que fallos corresponden a cada archivo o cual es valido si quiera.

****Pendiente:
Modificar salida del json para que solo se muestren los false" // Probar, demasiadas lineas para 1,8k de archivos => 200k

Se completaron los resultados con json invalidos con el uso de un script secundario para evaluar los batchs corregidos con errores de {}

** Datree:  

https://github.com/datreeio/datree
No es compatible con K8s 1.26+ de forma garantizada. Esta Deprecated desde el Junio de 2023

Datree (pronounced /da-tree/) was built to secure Kubernetes workloads by blocking the deployment of misconfigured resources. Since July 2023,
the commercial company that supports and actively maintains this project has been closed.
https://www.datree.io/
Se ha descartado su uso por ello... hasta la pagina de Get Started esta caida.


** ConfigLint:
https://github.com/stelligent/config-lint?tab=readme-ov-file
No se actualiza desde el 2020. Es decir, se puede dar casi como obseleta... No creo que sirva de referencia para la validacion de los yamls.
Documentacion caida, 
https://github.com/stelligent/config-lint/releases/tag/v1.6.0
Ultimo release en: released this Jun 25, 2020

** Conftest:
https://github.com/open-policy-agent/conftest
Conftest helps you write tests against structured configuration data. Using Conftest you can write tests for your Kubernetes configuration, Tekton pipeline definitions,
Terraform code, Serverless configs or any other config files.

Opciones:
https://www.conftest.dev/options/
Instalacion:
https://github.com/open-policy-agent/conftest/releases

Politicas de ejemplo para kubernetes:
https://github.com/open-policy-agent/conftest/tree/master/examples/kubernetes/policy


** Checkov:
https://github.com/bridgecrewio/checkov
is a static code analysis tool for infrastructure as code (IaC) and also a software composition analysis (SCA) tool for images and open source packages.


** Terrascan:
https://github.com/tenable/terrascan
Terrascan is a static code analyzer for Infrastructure as Code. It can be installed and run in a number of different ways, and is most commonly used in automated pipelines
to identify policy violations before insecure infrastructure is provisioned
Opciones terrascan
init = Initializes Terrascan by downloading the latest Rego policies into ~/.terrascan. The scan command will implicitly run this before a scan if it detects that there are no policies found.
scan = scans Infrastructure as code files based on the policies contained within the “.terrascan” directory
server = Starts the Terrascan’s API server

Instalar Terrascan:
https://github.com/tenable/terrascan/releases

https://runterrascan.io/docs/_print/#pg-3370a37a26a8434b9f282b1985d6791f

Se usa la opcion -i para definir el tipo de archivos que se van a validar
Ejecucion archivo solo:
.\terrascan.exe scan -f manifests_yamls\pod.yaml -i k8s -o json

https://runterrascan.io/docs/_print/#scanning
Funcionas basicas de scaneo
Posibles reglas aqui: https://github.com/tenable/terrascan/tree/master/pkg/policies/opa/rego/k8s/kubernetes_namespace


** Trivy:
https://github.com/aquasecurity/trivy
Trivy is a comprehensive and versatile security scanner. Trivy has scanners that look for security issues, and targets where it can find those issues.
Quizás la herramienta mas completa y valorada de las que se han visto...
https://trivy.dev/latest/getting-started/installation/
Instalacion: https://github.com/aquasecurity/trivy/releases/tag/v0.63.0

https://trivy.dev/latest/getting-started/

Se supone que las missconfigurations para realizar los escaneres se encuentran en https://github.com/aquasecurity/defsec/tree/master
que es un motor de políticas llamado Defsec, escritas en Rego, el repositorio
"Sources" de las politicas:
https://trivy.dev/v0.29.2/docs/misconfiguration/policy/builtin/
https://trivy.dev/v0.29.2/docs/misconfiguration/scanning/

Los archivos con 0 en el tiempo de procesamiento es porque la herramienta omitio directamente su escaneo y se agregaron de manera manual, config483.yaml,true,0,0
** Kube-bench
https://github.com/aquasecurity/kube-bench

Descartado porque esta diseñado para escanear los clusteres en tiempo de ejecucion

** Copper:
https://github.com/cloud66-oss/copper
Herramienta sin updates desde hace mas de 5 años..

** kubernetes-validate:
https://github.com/willthames/kubernetes-validate

Schemas validation 

pip install kubernetes-validate
** Kubeval:
Deprecated


Ejecucion de batchs erronea en
Lote batch_kx completado → Resultado en: ./results_polaris-cli/batch_kx.json
 Error de JSON en batch_am.json
 Error de JSON en batch_ax.json
 Error de JSON en batch_ba.json
 Error de JSON en batch_bb.json
 Error de JSON en batch_bf.json
 Error de JSON en batch_br.json
 Error de JSON en batch_bw.json
 Error de JSON en batch_cf.json
 Error de JSON en batch_cm.json
 Error de JSON en batch_cw.json
 Error de JSON en batch_cx.json
 Error de JSON en batch_de.json
 Error de JSON en batch_di.json
 Error de JSON en batch_eg.json
 Error de JSON en batch_ej.json
 Error de JSON en batch_ek.json
 Error de JSON en batch_el.json
 Error de JSON en batch_ew.json
 Error de JSON en batch_ez.json
 Error de JSON en batch_fv.json
 Error de JSON en batch_fw.json
 Error de JSON en batch_fz.json
 Error de JSON en batch_gl.json
 Error de JSON en batch_gm.json
 Error de JSON en batch_gn.json
 Error de JSON en batch_go.json
 Error de JSON en batch_gp.json
 Error de JSON en batch_gq.json
 Error de JSON en batch_gr.json
 Error de JSON en batch_gw.json
 Error de JSON en batch_ho.json
 Error de JSON en batch_hp.json
 Error de JSON en batch_ic.json
 Error de JSON en batch_io.json
 Error de JSON en batch_iq.json
 Error de JSON en batch_js.json
 Error de JSON en batch_jy.json
 Error de JSON en batch_ka.json
 Error de JSON en batch_kb.json
 CSV generado: ./results/polaris-cli/validation_results02.csv


 Procesado lote batch_bi con 300 archivos
./exec_kubeconform.sh: line 23: /c/Users/CAOSD/AppData/Local/Microsoft/WinGet/Packages/YannHamon.kubeconform_Microsoft.Winget.Source_8wekyb3d8bbwe/kubeconform: Argument list too long
Procesado lote batch_bj con 300 archivos